import realization_chess
import sys
from PyQt6.QtWidgets import QApplication, QGraphicsScene, QGraphicsView, QGraphicsRectItem, QGraphicsTextItem
from PyQt6.QtGui import QBrush, QColor, QFont
from PyQt6.QtCore import Qt


class BasicWindow(QGraphicsView):
    def __init__(self):
        super().__init__()
        self.scene = QGraphicsScene()
        self.setScene(self.scene)
        self.resize(800, 800)

        self.game_board = realization_chess.Board()
        self.game_board.start_position()

        self.draw_board()
        self.update_board()

        self.cell_from = None
        self.selection_rect = None
        self.checkmate_rect = None

    def draw_board(self):
        for i in range(8):
            for j in range(8):
                rect = QGraphicsRectItem(i * 100, j * 100, 100, 100)
                if (i + j) % 2 == 0:
                    rect.setBrush(QBrush(QColor(110, 175, 120)))
                else:
                    rect.setBrush(QBrush(QColor(230, 240, 230)))
                self.scene.addItem(rect)

    def update_board(self):

        for item in self.scene.items():
            if isinstance(item, QGraphicsTextItem):
                self.scene.removeItem(item)


        figure_symbols = {
            realization_chess.Pawn: "P",
            realization_chess.Rook: "R",
            realization_chess.Knight: "H",
            realization_chess.Bishop: "B",
            realization_chess.Queen: "Q",
            realization_chess.King: "K",
            realization_chess.FreeCell: ""
        }

        for i in range(8):
            for j in range(8):
                cell = self.game_board.board[i][j]
                symbol = figure_symbols[type(cell)]
                figure_color = QColor(0, 0, 0)

                if not isinstance(cell, realization_chess.FreeCell) and cell.definition > 0:
                    figure_color = QColor(140, 50, 50)

                if symbol != "":
                    text = QGraphicsTextItem(symbol)
                    text.setFont(QFont("Times New Roman", 36))
                    text.setDefaultTextColor(figure_color)
                    text.setPos(j * 100 + 35, i * 100 + 25)
                    self.scene.addItem(text)



    def mousePressEvent(self, event):
        if self.game_board.checkmate != 0:
            self.checkmate_rect = self.checkmate_rect = QGraphicsRectItem(200, 300, 400, 200)
            self.checkmate_rect.setBrush(QBrush(QColor(210, 140, 160)))
            self.scene.addItem(self.checkmate_rect)
            t = ''
            if self.game_board.checkmate < 0:
                t = 'Game over! Black won'
            else:
                t = 'Game over! White won'
            text = QGraphicsTextItem(t)
            text.setFont(QFont("Arial", 30))
            text.setDefaultTextColor(QColor(0, 0, 0))
            text.setPos(250, 380)
            self.scene.addItem(text)

        x, y = event.pos().x() // 100, event.pos().y() // 100

        if self.cell_from is None:
            self.cell_from = (y, x)
            self.selection_rect = QGraphicsRectItem(x * 100, y * 100, 100, 100)
            self.selection_rect.setBrush(QBrush(QColor(200, 230, 255, 75)))
            self.scene.addItem(self.selection_rect)
            print(f"Figure at the position: {self.cell_from} is moving!")
        else:
            cell_to = (y, x)
            if self.game_board.make_move(self.cell_from, cell_to):
                self.update_board()
            self.scene.removeItem(self.selection_rect)
            self.cell_from = None


app = QApplication(sys.argv)
window = BasicWindow()
window.show()
sys.exit(app.exec())
